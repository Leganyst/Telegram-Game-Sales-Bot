from aiogram.dispatcher import FSMContext
from aiogram import types
from aiogram.types import PreCheckoutQuery

from admin_bot.settings.config import dp_admin, bot_admin, PROVIDER_TOKEN, QIWI_PAY_TRANSFER_LINK
from database.games_table_operations import GamesTable
from database.genres_table_operations import GenresTable
from database.purchases_table_operations import PurchasesTable
from .states import BuyGameState

import datetime

def make_games_list(genre_id):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∂–∞–Ω—Ä—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã games
    genres_table = GenresTable()
    genre_name = genres_table.get_genre_name(genre_id)

    games_table = GamesTable()
    games = games_table.select_rows_by_genre(genre_id, limit=5, offset=0)

    if not games:
        return None

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for game in games:
        game_id = game[0]
        game_name = game[1]
        button = types.InlineKeyboardButton(game_name, callback_data=f"game_id:{game_id}")
        keyboard.add(button)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç—Ä–µ–ª–∫–∏ –≤–ø—Ä–∞–≤–æ
    next_button = types.InlineKeyboardButton("‚û°Ô∏è", callback_data="next")
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
    cancel_button = types.InlineKeyboardButton("‚ùå", callback_data="cancel")
    back_button = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º', callback_data='back')
    keyboard.row(cancel_button, next_button)
    keyboard.add(back_button)

    return genre_name, keyboard
    

def make_genres_lists():
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã genres
    genres_table = GenresTable()
    genres = genres_table.get_all_genres()

    # –†–∞–∑–¥–µ–ª—è–µ–º –∂–∞–Ω—Ä—ã –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    columns = 3
    keyboard = types.InlineKeyboardMarkup(row_width=columns)
    for genre in genres:
        genre_id = genre[0]
        genre_name = genre[1]
        button = types.InlineKeyboardButton(genre_name, callback_data=f"genre_id:{genre_id}")
        keyboard.add(button)
    return keyboard


@dp_admin.message_handler(commands=['buy'])
async def buy_handler(message: types.Message):
    keyboard = make_genres_lists()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä
    await bot_admin.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω. "
                                                               "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—É—é –∏–≥—Ä—É! üïπÔ∏èüí°\n\n"
                                                               "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –∂–∞–Ω—Ä–æ–≤ –Ω–∏–∂–µ:",
                                 reply_markup=keyboard)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /buy
    await BuyGameState.SelectGenre.set()


@dp_admin.callback_query_handler(lambda query: query.data.startswith('genre_id:'), state=BuyGameState.SelectGenre)
async def select_genre_handler(query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º genre_id –∏–∑ callback_data
    genre_id = query.data.split(':')[1]

    keyboard_and_game_name = make_games_list(genre_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–≥—Ä
    if not keyboard_and_game_name:
        await bot_admin.answer_callback_query(query.id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä –≤ —ç—Ç–æ–º –∂–∞–Ω—Ä–µ.")
        return

    offset = 0  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –Ω–∞ 0
    await state.update_data(offset=offset)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –≤ state data
    await state.update_data(genre_id=genre_id)

    await bot_admin.send_message(chat_id=query.message.chat.id, text=f"–í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–≥—Ä—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞ {keyboard_and_game_name[0]} üéÆüî• \n\n"
                                                                      "–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞:",
                                 reply_markup=keyboard_and_game_name[1])

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot_admin.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
    await BuyGameState.SelectGame.set()


# –°—Ç—Ä–µ–ª–æ—á–∫–∞ –≤–ø—Ä–∞–≤–æ
@dp_admin.callback_query_handler(lambda query: query.data == 'next', state=BuyGameState.SelectGame)
async def handle_next_button(query: types.CallbackQuery, state: FSMContext):
    await query.answer()
    data = await state.get_data()
    offset = data['offset']
    genre_id = data['genre_id']

    offset += 5

    games_table = GamesTable()
    games = games_table.select_rows_by_genre(genre_id, limit=5, offset=offset)
    if not games:
        await query.answer('–î–∞–ª—å—à–µ –∏–≥—Ä –Ω–µ—Ç.', show_alert=True)
        return

    await state.update_data(offset=offset)

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for game in games:
        game_id = game[0]
        game_name = game[1]
        button = types.InlineKeyboardButton(game_name, callback_data=f"game_id:{game_id}")
        keyboard.add(button)

    prev_button = types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="prev")
    next_button = types.InlineKeyboardButton("‚û°Ô∏è", callback_data="next")
    cancel_button = types.InlineKeyboardButton("‚ùå", callback_data="cancel")
    back_button = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º', callback_data='back')
    keyboard.row(prev_button, cancel_button, next_button)
    keyboard.add(back_button)

    await bot_admin.edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                             reply_markup=keyboard)


# –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∂–∞–Ω—Ä–∞–º
@dp_admin.callback_query_handler(lambda query: query.data == 'back', state=BuyGameState.SelectGame)
async def back_handler_button(query: types.CallbackQuery, state:FSMContext):
    keyboard = make_genres_lists()

    await bot_admin.edit_message_text(chat_id=query.message.chat.id, text="–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω. "
                                                               "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—É—é –∏–≥—Ä—É! üïπÔ∏èüí°\n\n"
                                                               "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –∂–∞–Ω—Ä–æ–≤ –Ω–∏–∂–µ:",
                                 reply_markup=keyboard, message_id=query.message.message_id)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    await BuyGameState.SelectGenre.set()


# –°—Ç—Ä–µ–ª–æ—á–∫–∞ –≤–ª–µ–≤–æ
@dp_admin.callback_query_handler(lambda query: query.data == "prev", state=BuyGameState.SelectGame)
async def handle_prev_button(query: types.CallbackQuery, state: FSMContext):
    await query.answer()
    data = await state.get_data()
    offset = data['offset']
    genre_id = data['genre_id']

    offset -= 5

    if offset < 0:
        offset = 0

    games_table = GamesTable()
    games = games_table.select_rows_by_genre(genre_id, limit=5, offset=offset)
    if not games:
        await query.answer('–î–∞–ª—å—à–µ –∏–≥—Ä –Ω–µ—Ç.', show_alert=True)
        return

    await state.update_data(offset=offset)

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for game in games:
        game_id = game[0]
        game_name = game[1]
        button = types.InlineKeyboardButton(game_name, callback_data=f"game_id:{game_id}")
        keyboard.add(button)

    prev_button = types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="prev")
    next_button = types.InlineKeyboardButton("‚û°Ô∏è", callback_data="next")
    cancel_button = types.InlineKeyboardButton("‚ùå", callback_data="cancel")
    back_button = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º', callback_data='back')
    if offset == 0:
        keyboard.row(cancel_button, next_button)
    else:
        keyboard.row(prev_button, cancel_button, next_button)

    keyboard.add(back_button)

    await bot_admin.edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                             reply_markup=keyboard)


# –ö—Ä–µ—Å—Ç–∏–∫
@dp_admin.callback_query_handler(lambda query: query.data == "cancel", state=BuyGameState.SelectGame)
async def handle_cancel_button(query: types.CallbackQuery, state: FSMContext):
    await query.answer()
    # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot_admin.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    await state.finish()

    await bot_admin.send_message(chat_id=query.message.chat.id, text="–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–∫—É–ø–∫–∏. /buy –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤")


# –í—ã–≤–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
@dp_admin.callback_query_handler(lambda query: query.data.startswith("game_id:"), state=BuyGameState.SelectGame)
async def confirm_buy_handler(query: types.CallbackQuery, state: FSMContext):
    await query.answer()

    game_id = query.data.split(":")[1]

    games_table = GamesTable()
    game = games_table.get_game_by_id(game_id)

    genres_table = GenresTable()
    genre_name = genres_table.get_genre_name(game['genre_id'])

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä—ã
    game_info = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {game['name']}\n" \
                f"–ñ–∞–Ω—Ä: {genre_name}\n" \
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {game['description']}\n" \
                f"–¶–µ–Ω–∞: {game['price']}"

    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    media = types.MediaGroup()
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –ø–æ–¥–ø–∏—Å—å—é
    media.attach_photo(game['photos'][0], caption=game_info)
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
    for photo in game['photos'][1:]:
        media.attach_photo(photo)
    
    back_button = types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É', callback_data='back_catalog')
    pay_button = types.InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å {game['price']}", callback_data=f"pay:{int(game['price'])}")
    pay_qiwi_button = types.InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –∫–∏–≤–∏ {game['price']}", callback_data=f'qiwi_pay:{int(game["price"])}')
    keyboard = types.InlineKeyboardMarkup().add(pay_button)
    keyboard.add(pay_qiwi_button)
    keyboard.add(back_button)
    await state.update_data(game_name=game['name'])
    await state.update_data(game_description=game['description'])
    await state.update_data(game_id=game_id)

    await bot_admin.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    await bot_admin.send_media_group(chat_id=query.message.chat.id, media=media)
    await bot_admin.send_message(chat_id=query.message.chat.id, text='–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –æ–ø–ª–∞—Ç–∞', reply_markup=keyboard)
    await BuyGameState.WaitPaying.set()


# –í—ã–≤–æ–¥–∏–º –∫–∞—Ç–∞–ª–æ–≥ –∏–≥—Ä –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∂–∞–Ω—Ä—É
@dp_admin.callback_query_handler(lambda query: query.data == 'back_catalog', state=BuyGameState.WaitPaying)
async def back_to_catalog_game(query: types.CallbackQuery, state: FSMContext):

    data = await state.get_data()
    keyboard_and_game_name = make_games_list(data['genre_id'])

    offset = 0  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –Ω–∞ 0
    await state.update_data(offset=offset)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –≤ state data
    await state.update_data(genre_id=data['genre_id'])

    await bot_admin.send_message(chat_id=query.message.chat.id, text=f"–í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–≥—Ä—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞ {keyboard_and_game_name[0]} üéÆüî• \n\n"
                                                                      "–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞:",
                                 reply_markup=keyboard_and_game_name[1])

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot_admin.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    await bot_admin.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id - 1)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
    await BuyGameState.SelectGame.set()


# –ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –∫–∏–≤–∏
@dp_admin.callback_query_handler(lambda query: query.data.startswith('qiwi_pay:'), state=BuyGameState.WaitPaying)
async def start_payment_qiwi_handler(query: types.CallbackQuery, state: FSMContext):
    await query.answer()

    price = int(query.data.split(':')[1])
    if price < 10:
        # –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –º–µ–Ω—å—à–µ 10 —Ä—É–±–ª–µ–π, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await query.message.answer('–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è. –û–ø–ª–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.')
        return

    await query.message.answer(f'–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {QIWI_PAY_TRANSFER_LINK}')
    await query.message.answer(f'–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É {price} —Ä—É–±–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–≤–∞—Ä–∞ –∏ —á–µ–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü—É.'
                               ' –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –∏–≥—Ä - /buy')
    await state.finish()


# –ü—Ä–∏ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º
@dp_admin.callback_query_handler(lambda query: query.data.startswith('pay:'), state=BuyGameState.WaitPaying)
async def start_payment_handler(query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    price = int(query.data.split(':')[1]) * 100

    game_info = await state.get_data()

    if price < 10 * 100:
        # –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –º–µ–Ω—å—à–µ 10 —Ä—É–±–ª–µ–π, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await query.message.answer('–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è. –û–ø–ª–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.')
        return

    await bot_admin.send_invoice(
        chat_id=query.message.chat.id,
        title=game_info['game_name'],
        description=game_info['game_description'],
        payload='custom_payload',
        provider_token=PROVIDER_TOKEN,
        currency='RUB',
        prices=[
            types.LabeledPrice(label='–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞', amount=price)
        ],
        start_parameter='payment',
        need_shipping_address=True
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
@dp_admin.pre_checkout_query_handler(state=BuyGameState.WaitPaying)
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery, state: FSMContext):
    await bot_admin.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
@dp_admin.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT, state=BuyGameState.WaitPaying)
async def successful_payment_handler(message: types.Message, state: FSMContext):
    await bot_admin.send_message(chat_id=message.chat.id, text='–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    purchase_date = datetime.datetime.now()

    state_data = await state.get_data()

    purchases_table = PurchasesTable()
    # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ add_purchase —Å –ø–µ—Ä–µ–¥–∞—á–µ–π user_id, game_id –∏ purchase_date
    purchases_table.add_purchase(message.from_user.id, state_data['game_id'], purchase_date)

    await state.reset_state()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
@dp_admin.shipping_query_handler(state=BuyGameState.WaitPaying)
async def process_shipping_query(shipping_query: types.ShippingQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏ –∞–¥—Ä–µ—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏
    order_info = shipping_query.order_info
    shipping_address = order_info.shipping_address
    # –î–∞–ª–µ–µ –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    # ...

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
@dp_admin.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT, state=BuyGameState.WaitPaying)
async def successful_shipping_handler(message: types.Message, state: FSMContext):
    await bot_admin.send_message(chat_id=message.chat.id, text='–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω!')
    await state.reset_state()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
